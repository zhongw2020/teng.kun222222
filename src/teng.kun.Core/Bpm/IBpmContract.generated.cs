// -----------------------------------------------------------------------
// <auto-generated>
//    此代码由代码生成器生成。
//    手动更改此文件可能导致应用程序出现意外的行为。
//    如果重新生成代码，对此文件的任何修改都会丢失。
//    如果需要扩展此类，可以遵守如下规则进行扩展：
//      1. 横向扩展：如需给当前模块添加方法接口，可新建文件“IBpmContract.cs”的分部接口“public partial interface IBpmContract”添加方法，并添加相应新的分部基类 abstract partial class BpmServiceBase 实现新方法
// </auto-generated>
//
//  <copyright file="IBpmContract.generated.cs" company="teng.kun">
//      teng.kun
//  </copyright>
//  <site>http://teng.kun</site>
//  <last-editor>teng.kun</last-editor>
// -----------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

using OSharp.Data;
using OSharp.Extensions;

using teng.kun.Bpm.Dtos;
using teng.kun.Bpm.Entities;


namespace teng.kun.Bpm
{
    /// <summary>
    /// 业务契约接口：流程管理模块
    /// </summary>
    public partial interface IBpmContract
    {
        #region 请假流程信息业务

        /// <summary>
        /// 获取 请假流程信息查询数据集
        /// </summary>
        IQueryable<LeaveBp> LeaveBps { get; }

        /// <summary>
        /// 检查请假流程信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的请假流程信息编号</param>
        /// <returns>请假流程信息是否存在</returns>
        Task<bool> CheckLeaveBpExists(Expression<Func<LeaveBp, bool>> predicate, int id = default(int));
        
        /// <summary>
        /// 添加请假流程信息信息
        /// </summary>
        /// <param name="dtos">要添加的请假流程信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> CreateLeaveBps(params LeaveBpInputDto[] dtos);
            
        /// <summary>
        /// 更新请假流程信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的请假流程信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateLeaveBps(params LeaveBpInputDto[] dtos);
            
        /// <summary>
        /// 删除请假流程信息信息
        /// </summary>
        /// <param name="ids">要删除的请假流程信息编号</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> DeleteLeaveBps(params int[] ids);
        

        #endregion
        
        #region 加班流程信息业务

        /// <summary>
        /// 获取 加班流程信息查询数据集
        /// </summary>
        IQueryable<ExtraBp> ExtraBps { get; }

        /// <summary>
        /// 检查加班流程信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的加班流程信息编号</param>
        /// <returns>加班流程信息是否存在</returns>
        Task<bool> CheckExtraBpExists(Expression<Func<ExtraBp, bool>> predicate, int id = default(int));
        
        /// <summary>
        /// 添加加班流程信息信息
        /// </summary>
        /// <param name="dtos">要添加的加班流程信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> CreateExtraBps(params ExtraBpInputDto[] dtos);
            
        /// <summary>
        /// 更新加班流程信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的加班流程信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateExtraBps(params ExtraBpInputDto[] dtos);
            
        /// <summary>
        /// 删除加班流程信息信息
        /// </summary>
        /// <param name="ids">要删除的加班流程信息编号</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> DeleteExtraBps(params int[] ids);
        

        #endregion
        
    }
}
